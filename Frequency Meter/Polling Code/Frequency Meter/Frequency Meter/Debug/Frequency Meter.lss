
Frequency Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000818  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000818  000008ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080007e  0080007e  000008ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000154a  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e8  00000000  00000000  00001fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000baa  00000000  00000000  000029ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00003574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000679  00000000  00000000  00003894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e47  00000000  00000000  00003f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004d54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 89 02 	jmp	0x512	; 0x512 <__vector_5>
  18:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 38       	cpi	r26, 0x8F	; 143
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 35 02 	call	0x46a	; 0x46a <main>
  8a:	0c 94 0a 04 	jmp	0x814	; 0x814 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_VidSetPinValue>:
}

	
void DIO_VidSetPinValue(u8 PinNumber, u8 PortNumber, u8 Value)
{
	switch(PortNumber)
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	39 f1       	breq	.+78     	; 0xe4 <DIO_VidSetPinValue+0x52>
  96:	38 f0       	brcs	.+14     	; 0xa6 <DIO_VidSetPinValue+0x14>
  98:	62 30       	cpi	r22, 0x02	; 2
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_VidSetPinValue+0xc>
  9c:	42 c0       	rjmp	.+132    	; 0x122 <DIO_VidSetPinValue+0x90>
  9e:	63 30       	cpi	r22, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_VidSetPinValue+0x12>
  a2:	5e c0       	rjmp	.+188    	; 0x160 <DIO_VidSetPinValue+0xce>
  a4:	08 95       	ret
	{
		case portA:
		if (Value == HIGH)
  a6:	41 30       	cpi	r20, 0x01	; 1
  a8:	69 f4       	brne	.+26     	; 0xc4 <DIO_VidSetPinValue+0x32>
		{
			SET_BIT(PORTA_REG,PinNumber);
  aa:	4b b3       	in	r20, 0x1b	; 27
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	b9 01       	movw	r22, r18
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_VidSetPinValue+0x26>
  b4:	66 0f       	add	r22, r22
  b6:	77 1f       	adc	r23, r23
  b8:	8a 95       	dec	r24
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_VidSetPinValue+0x22>
  bc:	cb 01       	movw	r24, r22
  be:	84 2b       	or	r24, r20
  c0:	8b bb       	out	0x1b, r24	; 27
  c2:	08 95       	ret
		}
		else
		{
			if (Value == LOW)
  c4:	41 11       	cpse	r20, r1
  c6:	6a c0       	rjmp	.+212    	; 0x19c <DIO_VidSetPinValue+0x10a>
			{
				CLR_BIT(PORTA_REG,PinNumber);
  c8:	4b b3       	in	r20, 0x1b	; 27
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	b9 01       	movw	r22, r18
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_VidSetPinValue+0x44>
  d2:	66 0f       	add	r22, r22
  d4:	77 1f       	adc	r23, r23
  d6:	8a 95       	dec	r24
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_VidSetPinValue+0x40>
  da:	cb 01       	movw	r24, r22
  dc:	80 95       	com	r24
  de:	84 23       	and	r24, r20
  e0:	8b bb       	out	0x1b, r24	; 27
  e2:	08 95       	ret
		
		break;
		
		
		case portB:
		if (Value == HIGH)
  e4:	41 30       	cpi	r20, 0x01	; 1
  e6:	69 f4       	brne	.+26     	; 0x102 <DIO_VidSetPinValue+0x70>
		{
			SET_BIT(PORTB_REG,PinNumber);
  e8:	48 b3       	in	r20, 0x18	; 24
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	b9 01       	movw	r22, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_VidSetPinValue+0x64>
  f2:	66 0f       	add	r22, r22
  f4:	77 1f       	adc	r23, r23
  f6:	8a 95       	dec	r24
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_VidSetPinValue+0x60>
  fa:	cb 01       	movw	r24, r22
  fc:	84 2b       	or	r24, r20
  fe:	88 bb       	out	0x18, r24	; 24
 100:	08 95       	ret
		}
		else
		{
			if (Value == LOW)
 102:	41 11       	cpse	r20, r1
 104:	4b c0       	rjmp	.+150    	; 0x19c <DIO_VidSetPinValue+0x10a>
			{
				CLR_BIT(PORTB_REG,PinNumber);
 106:	48 b3       	in	r20, 0x18	; 24
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_VidSetPinValue+0x82>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	8a 95       	dec	r24
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_VidSetPinValue+0x7e>
 118:	cb 01       	movw	r24, r22
 11a:	80 95       	com	r24
 11c:	84 23       	and	r24, r20
 11e:	88 bb       	out	0x18, r24	; 24
 120:	08 95       	ret
		
		break;
		
		
		case portC:
		if (Value == HIGH)
 122:	41 30       	cpi	r20, 0x01	; 1
 124:	69 f4       	brne	.+26     	; 0x140 <DIO_VidSetPinValue+0xae>
		{
			SET_BIT(PORTC_REG,PinNumber);
 126:	45 b3       	in	r20, 0x15	; 21
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_VidSetPinValue+0xa2>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	8a 95       	dec	r24
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_VidSetPinValue+0x9e>
 138:	cb 01       	movw	r24, r22
 13a:	84 2b       	or	r24, r20
 13c:	85 bb       	out	0x15, r24	; 21
 13e:	08 95       	ret
		}
		else
		{
			if (Value == LOW)
 140:	41 11       	cpse	r20, r1
 142:	2c c0       	rjmp	.+88     	; 0x19c <DIO_VidSetPinValue+0x10a>
			{
				CLR_BIT(PORTC_REG,PinNumber);
 144:	45 b3       	in	r20, 0x15	; 21
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	b9 01       	movw	r22, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_VidSetPinValue+0xc0>
 14e:	66 0f       	add	r22, r22
 150:	77 1f       	adc	r23, r23
 152:	8a 95       	dec	r24
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_VidSetPinValue+0xbc>
 156:	cb 01       	movw	r24, r22
 158:	80 95       	com	r24
 15a:	84 23       	and	r24, r20
 15c:	85 bb       	out	0x15, r24	; 21
 15e:	08 95       	ret
		}
		
		break;
		
		case portD:
		if (Value == HIGH)
 160:	41 30       	cpi	r20, 0x01	; 1
 162:	69 f4       	brne	.+26     	; 0x17e <DIO_VidSetPinValue+0xec>
		{
			SET_BIT(PORTD_REG,PinNumber);
 164:	42 b3       	in	r20, 0x12	; 18
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	b9 01       	movw	r22, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_VidSetPinValue+0xe0>
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	8a 95       	dec	r24
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_VidSetPinValue+0xdc>
 176:	cb 01       	movw	r24, r22
 178:	84 2b       	or	r24, r20
 17a:	82 bb       	out	0x12, r24	; 18
 17c:	08 95       	ret
		}
		else
		{
			if (Value == LOW)
 17e:	41 11       	cpse	r20, r1
 180:	0d c0       	rjmp	.+26     	; 0x19c <DIO_VidSetPinValue+0x10a>
			{
				CLR_BIT(PORTD_REG,PinNumber);
 182:	42 b3       	in	r20, 0x12	; 18
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	b9 01       	movw	r22, r18
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_VidSetPinValue+0xfe>
 18c:	66 0f       	add	r22, r22
 18e:	77 1f       	adc	r23, r23
 190:	8a 95       	dec	r24
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_VidSetPinValue+0xfa>
 194:	cb 01       	movw	r24, r22
 196:	80 95       	com	r24
 198:	84 23       	and	r24, r20
 19a:	82 bb       	out	0x12, r24	; 18
 19c:	08 95       	ret

0000019e <LCD_VidDelay_uS>:
	DIO_VidSetPinValue(RS,CONTROL_PORT,LOW);	 
	DIO_VidSetPinValue(RW,CONTROL_PORT,LOW);
	DIO_VidSetPinValue(EN,CONTROL_PORT,HIGH);
	LCD_VidDelay_uS(1);
	DIO_VidSetPinValue(EN,CONTROL_PORT,LOW);
	LCD_VidDelay_uS(200);
 19e:	00 97       	sbiw	r24, 0x00	; 0
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <LCD_VidDelay_uS+0x1a>
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	45 e0       	ldi	r20, 0x05	; 5
 1a8:	4a 95       	dec	r20
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_VidDelay_uS+0xa>
 1ac:	00 00       	nop
 1ae:	2f 5f       	subi	r18, 0xFF	; 255
 1b0:	3f 4f       	sbci	r19, 0xFF	; 255
 1b2:	82 17       	cp	r24, r18
 1b4:	93 07       	cpc	r25, r19
 1b6:	b9 f7       	brne	.-18     	; 0x1a6 <LCD_VidDelay_uS+0x8>
 1b8:	08 95       	ret

000001ba <LCD_Vid_4BitSendChar>:
 1ba:	cf 93       	push	r28
 1bc:	c8 2f       	mov	r28, r24
 1be:	88 b3       	in	r24, 0x18	; 24
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	9c 2f       	mov	r25, r28
 1c4:	90 7f       	andi	r25, 0xF0	; 240
 1c6:	89 2b       	or	r24, r25
 1c8:	88 bb       	out	0x18, r24	; 24
 1ca:	41 e0       	ldi	r20, 0x01	; 1
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinValue>
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinValue>
 1de:	41 e0       	ldi	r20, 0x01	; 1
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinValue>
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_VidDelay_uS>
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinValue>
 1fa:	84 e1       	ldi	r24, 0x14	; 20
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_VidDelay_uS>
 202:	88 b3       	in	r24, 0x18	; 24
 204:	28 2f       	mov	r18, r24
 206:	2f 70       	andi	r18, 0x0F	; 15
 208:	30 e1       	ldi	r19, 0x10	; 16
 20a:	c3 9f       	mul	r28, r19
 20c:	c0 01       	movw	r24, r0
 20e:	11 24       	eor	r1, r1
 210:	82 2b       	or	r24, r18
 212:	88 bb       	out	0x18, r24	; 24
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinValue>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_VidDelay_uS>
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinValue>
 230:	88 ec       	ldi	r24, 0xC8	; 200
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_VidDelay_uS>
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <LCD_Vid4BitSendString>:
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	ec 01       	movw	r28, r24
 242:	88 81       	ld	r24, Y
 244:	88 23       	and	r24, r24
 246:	31 f0       	breq	.+12     	; 0x254 <LCD_Vid4BitSendString+0x18>
 248:	21 96       	adiw	r28, 0x01	; 1
 24a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_Vid_4BitSendChar>
 24e:	89 91       	ld	r24, Y+
 250:	81 11       	cpse	r24, r1
 252:	fb cf       	rjmp	.-10     	; 0x24a <LCD_Vid4BitSendString+0xe>
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <LCD_Vid_4BitSendCommand>:
 25a:	cf 93       	push	r28
 25c:	c8 2f       	mov	r28, r24
 25e:	88 b3       	in	r24, 0x18	; 24
 260:	8f 70       	andi	r24, 0x0F	; 15
 262:	9c 2f       	mov	r25, r28
 264:	90 7f       	andi	r25, 0xF0	; 240
 266:	89 2b       	or	r24, r25
 268:	88 bb       	out	0x18, r24	; 24
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinValue>
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinValue>
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinValue>
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_VidDelay_uS>
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinValue>
 29a:	84 e1       	ldi	r24, 0x14	; 20
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_VidDelay_uS>
 2a2:	88 b3       	in	r24, 0x18	; 24
 2a4:	28 2f       	mov	r18, r24
 2a6:	2f 70       	andi	r18, 0x0F	; 15
 2a8:	30 e1       	ldi	r19, 0x10	; 16
 2aa:	c3 9f       	mul	r28, r19
 2ac:	c0 01       	movw	r24, r0
 2ae:	11 24       	eor	r1, r1
 2b0:	82 2b       	or	r24, r18
 2b2:	88 bb       	out	0x18, r24	; 24
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinValue>
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_VidDelay_uS>
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinValue>
 2d0:	88 ec       	ldi	r24, 0xC8	; 200
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_VidDelay_uS>
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <LCD_Vid_GoToXY>:
 2dc:	61 30       	cpi	r22, 0x01	; 1
 2de:	21 f4       	brne	.+8      	; 0x2e8 <LCD_Vid_GoToXY+0xc>
 2e0:	81 58       	subi	r24, 0x81	; 129
 2e2:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Vid_4BitSendCommand>
 2e6:	08 95       	ret
 2e8:	62 30       	cpi	r22, 0x02	; 2
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <LCD_Vid_GoToXY+0x16>
 2ec:	81 54       	subi	r24, 0x41	; 65
 2ee:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Vid_4BitSendCommand>
 2f2:	08 95       	ret

000002f4 <LCD_VidDelay_mS>:



void LCD_VidDelay_mS(u16 ms)
{
	for (u16 i = 0; i < ms; i++)
 2f4:	00 97       	sbiw	r24, 0x00	; 0
 2f6:	69 f0       	breq	.+26     	; 0x312 <LCD_VidDelay_mS+0x1e>
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fc:	ef e9       	ldi	r30, 0x9F	; 159
 2fe:	ff e0       	ldi	r31, 0x0F	; 15
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <LCD_VidDelay_mS+0xc>
 304:	00 c0       	rjmp	.+0      	; 0x306 <LCD_VidDelay_mS+0x12>
 306:	00 00       	nop
 308:	2f 5f       	subi	r18, 0xFF	; 255
 30a:	3f 4f       	sbci	r19, 0xFF	; 255
 30c:	82 17       	cp	r24, r18
 30e:	93 07       	cpc	r25, r19
 310:	a9 f7       	brne	.-22     	; 0x2fc <LCD_VidDelay_mS+0x8>
 312:	08 95       	ret

00000314 <LCD_VidClrLCD>:


void LCD_VidClrLCD(void)
{
	#if (MODE == 4)
	LCD_Vid_4BitSendCommand(CLEAR_DISPLAY);
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Vid_4BitSendCommand>
					LCD_VidDelay_mS(5);
 31a:	85 e0       	ldi	r24, 0x05	; 5
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_VidDelay_mS>
 322:	08 95       	ret

00000324 <LCD_Vid_4BitInit>:



 void LCD_Vid_4BitInit(void)
{
	CONTROL_PORT_DIR_REG |= (1<<RS) | (1<<RW) | (1<<EN);
 324:	87 b3       	in	r24, 0x17	; 23
 326:	87 60       	ori	r24, 0x07	; 7
 328:	87 bb       	out	0x17, r24	; 23
	DATA_PORT_DIR_REG	 |= (0xf0);		
 32a:	87 b3       	in	r24, 0x17	; 23
 32c:	80 6f       	ori	r24, 0xF0	; 240
 32e:	87 bb       	out	0x17, r24	; 23
	LCD_VidDelay_mS(20);
 330:	84 e1       	ldi	r24, 0x14	; 20
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_VidDelay_mS>
	DIO_VidSetPinValue(EN,CONTROL_PORT,LOW);
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_VidSetPinValue>
	LCD_Vid_4BitSendCommand(INTERFACE_8BIT_1);	
 342:	83 e3       	ldi	r24, 0x33	; 51
 344:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Vid_4BitSendCommand>
	LCD_Vid_4BitSendCommand(INTERFACE_8BIT_2);
 348:	82 e3       	ldi	r24, 0x32	; 50
 34a:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Vid_4BitSendCommand>
	LCD_Vid_4BitSendCommand(FUNCTION_SET_4BIT);
 34e:	88 e2       	ldi	r24, 0x28	; 40
 350:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Vid_4BitSendCommand>
	LCD_Vid_4BitSendCommand(DISPLAY_CONTROL);
 354:	8c e0       	ldi	r24, 0x0C	; 12
 356:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Vid_4BitSendCommand>
	LCD_VidClrLCD();
 35a:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_VidClrLCD>
	LCD_Vid_4BitSendCommand(ENTRY_MODE);
 35e:	86 e0       	ldi	r24, 0x06	; 6
 360:	0e 94 2d 01 	call	0x25a	; 0x25a <LCD_Vid_4BitSendCommand>
	LCD_VidDelay_uS(200); 
 364:	88 ec       	ldi	r24, 0xC8	; 200
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_VidDelay_uS>
 36c:	08 95       	ret

0000036e <Timer_Handler>:


void Timer_Handler(void)
{
	//Poll the Flag
	while (!GET_BIT(TIFR,ICF1));
 36e:	08 b6       	in	r0, 0x38	; 56
 370:	05 fe       	sbrs	r0, 5
 372:	fd cf       	rjmp	.-6      	; 0x36e <Timer_Handler>
	
	//Get the First reading
	Readings[0] = ICR1_Read();
 374:	0e 94 c7 02 	call	0x58e	; 0x58e <ICR1_Read>
 378:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <Readings+0x1>
 37c:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <Readings>
	
	//Clear the Flag
	SET_BIT(TIFR,ICF1);
 380:	88 b7       	in	r24, 0x38	; 56
 382:	80 62       	ori	r24, 0x20	; 32
 384:	88 bf       	out	0x38, r24	; 56
	
	//Poll the Flag again
	while (!GET_BIT(TIFR,ICF1));
 386:	08 b6       	in	r0, 0x38	; 56
 388:	05 fe       	sbrs	r0, 5
 38a:	fd cf       	rjmp	.-6      	; 0x386 <Timer_Handler+0x18>
	
	//Get the Second reading
	Readings[1] = ICR1_Read();
 38c:	0e 94 c7 02 	call	0x58e	; 0x58e <ICR1_Read>
 390:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <Readings+0x3>
 394:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <Readings+0x2>
	
	//Clear the Flag
	SET_BIT(TIFR,ICF1);
 398:	88 b7       	in	r24, 0x38	; 56
 39a:	80 62       	ori	r24, 0x20	; 32
 39c:	88 bf       	out	0x38, r24	; 56
 39e:	08 95       	ret

000003a0 <Calculate_Frequency>:
{	
	//Initialize variable for First time only
	static u16 Frequency ;
	
	//Subtract the First reading from the Second and divide the CPU frequency by the difference
	Frequency = F_CPU/(float)(Readings[1]-Readings[0]);	
 3a0:	e7 e8       	ldi	r30, 0x87	; 135
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
	return Frequency;
 3a4:	62 81       	ldd	r22, Z+2	; 0x02
 3a6:	73 81       	ldd	r23, Z+3	; 0x03
 3a8:	80 81       	ld	r24, Z
 3aa:	91 81       	ldd	r25, Z+1	; 0x01
 3ac:	68 1b       	sub	r22, r24
 3ae:	79 0b       	sbc	r23, r25
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 6d 03 	call	0x6da	; 0x6da <__floatunsisf>
 3b8:	9b 01       	movw	r18, r22
 3ba:	ac 01       	movw	r20, r24
 3bc:	60 e6       	ldi	r22, 0x60	; 96
 3be:	78 e6       	ldi	r23, 0x68	; 104
 3c0:	86 e6       	ldi	r24, 0x66	; 102
 3c2:	9b e4       	ldi	r25, 0x4B	; 75
 3c4:	0e 94 cc 02 	call	0x598	; 0x598 <__divsf3>
 3c8:	0e 94 3e 03 	call	0x67c	; 0x67c <__fixunssfsi>
}
 3cc:	cb 01       	movw	r24, r22
 3ce:	08 95       	ret

000003d0 <Convert_Integer_To_String>:
	_delay_ms(100);
}


u8* Convert_Integer_To_String(u16 integer_value)
{
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	ac 01       	movw	r20, r24
 3d6:	e6 e8       	ldi	r30, 0x86	; 134
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	ce e7       	ldi	r28, 0x7E	; 126
 3dc:	d0 e0       	ldi	r29, 0x00	; 0
	static  u8 string_value[9] = {0};
	
	for(u8 i=0, div =10 ;i<8 ; i++ )
	{
		string_value[7-i] = ((integer_value % 10) + 48) ;
 3de:	9a 01       	movw	r18, r20
 3e0:	ad ec       	ldi	r26, 0xCD	; 205
 3e2:	bc ec       	ldi	r27, 0xCC	; 204
 3e4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__umulhisi3>
 3e8:	96 95       	lsr	r25
 3ea:	87 95       	ror	r24
 3ec:	96 95       	lsr	r25
 3ee:	87 95       	ror	r24
 3f0:	96 95       	lsr	r25
 3f2:	87 95       	ror	r24
 3f4:	9c 01       	movw	r18, r24
 3f6:	22 0f       	add	r18, r18
 3f8:	33 1f       	adc	r19, r19
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	82 0f       	add	r24, r18
 408:	93 1f       	adc	r25, r19
 40a:	9a 01       	movw	r18, r20
 40c:	28 1b       	sub	r18, r24
 40e:	39 0b       	sbc	r19, r25
 410:	c9 01       	movw	r24, r18
 412:	80 5d       	subi	r24, 0xD0	; 208
 414:	82 93       	st	-Z, r24
		integer_value /= div ;
 416:	9a 01       	movw	r18, r20
 418:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__umulhisi3>
 41c:	ac 01       	movw	r20, r24
 41e:	56 95       	lsr	r21
 420:	47 95       	ror	r20
 422:	56 95       	lsr	r21
 424:	47 95       	ror	r20
 426:	56 95       	lsr	r21
 428:	47 95       	ror	r20

u8* Convert_Integer_To_String(u16 integer_value)
{
	static  u8 string_value[9] = {0};
	
	for(u8 i=0, div =10 ;i<8 ; i++ )
 42a:	ec 17       	cp	r30, r28
 42c:	fd 07       	cpc	r31, r29
 42e:	b9 f6       	brne	.-82     	; 0x3de <Convert_Integer_To_String+0xe>
		string_value[7-i] = ((integer_value % 10) + 48) ;
		integer_value /= div ;
	}
	
	return string_value;
}
 430:	8e e7       	ldi	r24, 0x7E	; 126
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <Update_LCD>:




void Update_LCD(u16 Reading)
{
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	ec 01       	movw	r28, r24
	LCD_Vid_GoToXY(1,2);
 440:	62 e0       	ldi	r22, 0x02	; 2
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LCD_Vid_GoToXY>
	LCD_Vid4BitSendString((Convert_Integer_To_String(Reading)));
 448:	ce 01       	movw	r24, r28
 44a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <Convert_Integer_To_String>
 44e:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Vid4BitSendString>
 452:	2f ea       	ldi	r18, 0xAF	; 175
 454:	8b e9       	ldi	r24, 0x9B	; 155
 456:	94 e0       	ldi	r25, 0x04	; 4
 458:	21 50       	subi	r18, 0x01	; 1
 45a:	80 40       	sbci	r24, 0x00	; 0
 45c:	90 40       	sbci	r25, 0x00	; 0
 45e:	e1 f7       	brne	.-8      	; 0x458 <Update_LCD+0x1e>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__stack+0x3>
 462:	00 00       	nop
	
	//To make the readings more Clear
	_delay_ms(100);
}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <main>:


int main(void)
{
	//Initialize LCD
	LCD_Vid_4BitInit();
 46a:	0e 94 92 01 	call	0x324	; 0x324 <LCD_Vid_4BitInit>
	
	//Send message to the User
	LCD_Vid4BitSendString(Entry_Message);
 46e:	80 e6       	ldi	r24, 0x60	; 96
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Vid4BitSendString>
 476:	2f eb       	ldi	r18, 0xBF	; 191
 478:	89 e2       	ldi	r24, 0x29	; 41
 47a:	9c e5       	ldi	r25, 0x5C	; 92
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	80 40       	sbci	r24, 0x00	; 0
 480:	90 40       	sbci	r25, 0x00	; 0
 482:	e1 f7       	brne	.-8      	; 0x47c <main+0x12>
 484:	00 c0       	rjmp	.+0      	; 0x486 <main+0x1c>
 486:	00 00       	nop
	
	_delay_ms(2000);
	LCD_VidClrLCD();
 488:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_VidClrLCD>
 48c:	2f eb       	ldi	r18, 0xBF	; 191
 48e:	89 e2       	ldi	r24, 0x29	; 41
 490:	9c e5       	ldi	r25, 0x5C	; 92
 492:	21 50       	subi	r18, 0x01	; 1
 494:	80 40       	sbci	r24, 0x00	; 0
 496:	90 40       	sbci	r25, 0x00	; 0
 498:	e1 f7       	brne	.-8      	; 0x492 <main+0x28>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <main+0x32>
 49c:	00 00       	nop
	_delay_ms(2000);
	
	LCD_Vid4BitSendString(First_Message);
 49e:	81 e7       	ldi	r24, 0x71	; 113
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Vid4BitSendString>

	//Initialize Timer_1
	Timer1_InputCapture_Init();	
 4a6:	0e 94 b6 02 	call	0x56c	; 0x56c <Timer1_InputCapture_Init>
	
	
    while (1) 
    {	
		Timer_Handler();
 4aa:	0e 94 b7 01 	call	0x36e	; 0x36e <Timer_Handler>
		Update_LCD(Calculate_Frequency());
 4ae:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <Calculate_Frequency>
 4b2:	0e 94 1d 02 	call	0x43a	; 0x43a <Update_LCD>
 4b6:	f9 cf       	rjmp	.-14     	; 0x4aa <main+0x40>

000004b8 <__vector_6>:

 void OCR1A_Write(u16 value)
 {
	 //The HIGH Byte must be written before the LOW Byte
	 OCR1AH = (value >> 8);
	 OCR1AL = (value & 0xFF);
 4b8:	1f 92       	push	r1
 4ba:	0f 92       	push	r0
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	0f 92       	push	r0
 4c0:	11 24       	eor	r1, r1
 4c2:	2f 93       	push	r18
 4c4:	3f 93       	push	r19
 4c6:	4f 93       	push	r20
 4c8:	5f 93       	push	r21
 4ca:	6f 93       	push	r22
 4cc:	7f 93       	push	r23
 4ce:	8f 93       	push	r24
 4d0:	9f 93       	push	r25
 4d2:	af 93       	push	r26
 4d4:	bf 93       	push	r27
 4d6:	ef 93       	push	r30
 4d8:	ff 93       	push	r31
 4da:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <G_TIMER1_COMPA>
 4de:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <G_TIMER1_COMPA+0x1>
 4e2:	89 2b       	or	r24, r25
 4e4:	29 f0       	breq	.+10     	; 0x4f0 <__vector_6+0x38>
 4e6:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <G_TIMER1_COMPA>
 4ea:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <G_TIMER1_COMPA+0x1>
 4ee:	09 95       	icall
 4f0:	ff 91       	pop	r31
 4f2:	ef 91       	pop	r30
 4f4:	bf 91       	pop	r27
 4f6:	af 91       	pop	r26
 4f8:	9f 91       	pop	r25
 4fa:	8f 91       	pop	r24
 4fc:	7f 91       	pop	r23
 4fe:	6f 91       	pop	r22
 500:	5f 91       	pop	r21
 502:	4f 91       	pop	r20
 504:	3f 91       	pop	r19
 506:	2f 91       	pop	r18
 508:	0f 90       	pop	r0
 50a:	0f be       	out	0x3f, r0	; 63
 50c:	0f 90       	pop	r0
 50e:	1f 90       	pop	r1
 510:	18 95       	reti

00000512 <__vector_5>:
 512:	1f 92       	push	r1
 514:	0f 92       	push	r0
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	0f 92       	push	r0
 51a:	11 24       	eor	r1, r1
 51c:	2f 93       	push	r18
 51e:	3f 93       	push	r19
 520:	4f 93       	push	r20
 522:	5f 93       	push	r21
 524:	6f 93       	push	r22
 526:	7f 93       	push	r23
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
 52c:	af 93       	push	r26
 52e:	bf 93       	push	r27
 530:	ef 93       	push	r30
 532:	ff 93       	push	r31
 534:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <G_TIMER1_CAPT>
 538:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <G_TIMER1_CAPT+0x1>
 53c:	89 2b       	or	r24, r25
 53e:	29 f0       	breq	.+10     	; 0x54a <__vector_5+0x38>
 540:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <G_TIMER1_CAPT>
 544:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <G_TIMER1_CAPT+0x1>
 548:	09 95       	icall
 54a:	ff 91       	pop	r31
 54c:	ef 91       	pop	r30
 54e:	bf 91       	pop	r27
 550:	af 91       	pop	r26
 552:	9f 91       	pop	r25
 554:	8f 91       	pop	r24
 556:	7f 91       	pop	r23
 558:	6f 91       	pop	r22
 55a:	5f 91       	pop	r21
 55c:	4f 91       	pop	r20
 55e:	3f 91       	pop	r19
 560:	2f 91       	pop	r18
 562:	0f 90       	pop	r0
 564:	0f be       	out	0x3f, r0	; 63
 566:	0f 90       	pop	r0
 568:	1f 90       	pop	r1
 56a:	18 95       	reti

0000056c <Timer1_InputCapture_Init>:
 56c:	1f bc       	out	0x2f, r1	; 47
 56e:	8e b5       	in	r24, 0x2e	; 46
 570:	80 64       	ori	r24, 0x40	; 64
 572:	8e bd       	out	0x2e, r24	; 46
 574:	8e b5       	in	r24, 0x2e	; 46
 576:	80 68       	ori	r24, 0x80	; 128
 578:	8e bd       	out	0x2e, r24	; 46
 57a:	8e b5       	in	r24, 0x2e	; 46
 57c:	81 60       	ori	r24, 0x01	; 1
 57e:	8e bd       	out	0x2e, r24	; 46
 580:	8e b5       	in	r24, 0x2e	; 46
 582:	8d 7f       	andi	r24, 0xFD	; 253
 584:	8e bd       	out	0x2e, r24	; 46
 586:	8e b5       	in	r24, 0x2e	; 46
 588:	8b 7f       	andi	r24, 0xFB	; 251
 58a:	8e bd       	out	0x2e, r24	; 46
 58c:	08 95       	ret

0000058e <ICR1_Read>:
 u16 ICR1_Read(void)
 {
	 static u16 value ;
	 
	 //Read Low first, then High
	 value = ICR1L;
 58e:	86 b5       	in	r24, 0x26	; 38
	 value |= ((u16)ICR1H)<<8;
 590:	27 b5       	in	r18, 0x27	; 39
	 
	 return value;
 592:	90 e0       	ldi	r25, 0x00	; 0
 }
 594:	92 2b       	or	r25, r18
 596:	08 95       	ret

00000598 <__divsf3>:
 598:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__divsf3x>
 59c:	0c 94 c1 03 	jmp	0x782	; 0x782 <__fp_round>
 5a0:	0e 94 ba 03 	call	0x774	; 0x774 <__fp_pscB>
 5a4:	58 f0       	brcs	.+22     	; 0x5bc <__divsf3+0x24>
 5a6:	0e 94 b3 03 	call	0x766	; 0x766 <__fp_pscA>
 5aa:	40 f0       	brcs	.+16     	; 0x5bc <__divsf3+0x24>
 5ac:	29 f4       	brne	.+10     	; 0x5b8 <__divsf3+0x20>
 5ae:	5f 3f       	cpi	r21, 0xFF	; 255
 5b0:	29 f0       	breq	.+10     	; 0x5bc <__divsf3+0x24>
 5b2:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_inf>
 5b6:	51 11       	cpse	r21, r1
 5b8:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__fp_szero>
 5bc:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_nan>

000005c0 <__divsf3x>:
 5c0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__fp_split3>
 5c4:	68 f3       	brcs	.-38     	; 0x5a0 <__divsf3+0x8>

000005c6 <__divsf3_pse>:
 5c6:	99 23       	and	r25, r25
 5c8:	b1 f3       	breq	.-20     	; 0x5b6 <__divsf3+0x1e>
 5ca:	55 23       	and	r21, r21
 5cc:	91 f3       	breq	.-28     	; 0x5b2 <__divsf3+0x1a>
 5ce:	95 1b       	sub	r25, r21
 5d0:	55 0b       	sbc	r21, r21
 5d2:	bb 27       	eor	r27, r27
 5d4:	aa 27       	eor	r26, r26
 5d6:	62 17       	cp	r22, r18
 5d8:	73 07       	cpc	r23, r19
 5da:	84 07       	cpc	r24, r20
 5dc:	38 f0       	brcs	.+14     	; 0x5ec <__divsf3_pse+0x26>
 5de:	9f 5f       	subi	r25, 0xFF	; 255
 5e0:	5f 4f       	sbci	r21, 0xFF	; 255
 5e2:	22 0f       	add	r18, r18
 5e4:	33 1f       	adc	r19, r19
 5e6:	44 1f       	adc	r20, r20
 5e8:	aa 1f       	adc	r26, r26
 5ea:	a9 f3       	breq	.-22     	; 0x5d6 <__divsf3_pse+0x10>
 5ec:	35 d0       	rcall	.+106    	; 0x658 <__divsf3_pse+0x92>
 5ee:	0e 2e       	mov	r0, r30
 5f0:	3a f0       	brmi	.+14     	; 0x600 <__divsf3_pse+0x3a>
 5f2:	e0 e8       	ldi	r30, 0x80	; 128
 5f4:	32 d0       	rcall	.+100    	; 0x65a <__divsf3_pse+0x94>
 5f6:	91 50       	subi	r25, 0x01	; 1
 5f8:	50 40       	sbci	r21, 0x00	; 0
 5fa:	e6 95       	lsr	r30
 5fc:	00 1c       	adc	r0, r0
 5fe:	ca f7       	brpl	.-14     	; 0x5f2 <__divsf3_pse+0x2c>
 600:	2b d0       	rcall	.+86     	; 0x658 <__divsf3_pse+0x92>
 602:	fe 2f       	mov	r31, r30
 604:	29 d0       	rcall	.+82     	; 0x658 <__divsf3_pse+0x92>
 606:	66 0f       	add	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	88 1f       	adc	r24, r24
 60c:	bb 1f       	adc	r27, r27
 60e:	26 17       	cp	r18, r22
 610:	37 07       	cpc	r19, r23
 612:	48 07       	cpc	r20, r24
 614:	ab 07       	cpc	r26, r27
 616:	b0 e8       	ldi	r27, 0x80	; 128
 618:	09 f0       	breq	.+2      	; 0x61c <__divsf3_pse+0x56>
 61a:	bb 0b       	sbc	r27, r27
 61c:	80 2d       	mov	r24, r0
 61e:	bf 01       	movw	r22, r30
 620:	ff 27       	eor	r31, r31
 622:	93 58       	subi	r25, 0x83	; 131
 624:	5f 4f       	sbci	r21, 0xFF	; 255
 626:	3a f0       	brmi	.+14     	; 0x636 <__divsf3_pse+0x70>
 628:	9e 3f       	cpi	r25, 0xFE	; 254
 62a:	51 05       	cpc	r21, r1
 62c:	78 f0       	brcs	.+30     	; 0x64c <__divsf3_pse+0x86>
 62e:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_inf>
 632:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__fp_szero>
 636:	5f 3f       	cpi	r21, 0xFF	; 255
 638:	e4 f3       	brlt	.-8      	; 0x632 <__divsf3_pse+0x6c>
 63a:	98 3e       	cpi	r25, 0xE8	; 232
 63c:	d4 f3       	brlt	.-12     	; 0x632 <__divsf3_pse+0x6c>
 63e:	86 95       	lsr	r24
 640:	77 95       	ror	r23
 642:	67 95       	ror	r22
 644:	b7 95       	ror	r27
 646:	f7 95       	ror	r31
 648:	9f 5f       	subi	r25, 0xFF	; 255
 64a:	c9 f7       	brne	.-14     	; 0x63e <__divsf3_pse+0x78>
 64c:	88 0f       	add	r24, r24
 64e:	91 1d       	adc	r25, r1
 650:	96 95       	lsr	r25
 652:	87 95       	ror	r24
 654:	97 f9       	bld	r25, 7
 656:	08 95       	ret
 658:	e1 e0       	ldi	r30, 0x01	; 1
 65a:	66 0f       	add	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	88 1f       	adc	r24, r24
 660:	bb 1f       	adc	r27, r27
 662:	62 17       	cp	r22, r18
 664:	73 07       	cpc	r23, r19
 666:	84 07       	cpc	r24, r20
 668:	ba 07       	cpc	r27, r26
 66a:	20 f0       	brcs	.+8      	; 0x674 <__divsf3_pse+0xae>
 66c:	62 1b       	sub	r22, r18
 66e:	73 0b       	sbc	r23, r19
 670:	84 0b       	sbc	r24, r20
 672:	ba 0b       	sbc	r27, r26
 674:	ee 1f       	adc	r30, r30
 676:	88 f7       	brcc	.-30     	; 0x65a <__divsf3_pse+0x94>
 678:	e0 95       	com	r30
 67a:	08 95       	ret

0000067c <__fixunssfsi>:
 67c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__fp_splitA>
 680:	88 f0       	brcs	.+34     	; 0x6a4 <__fixunssfsi+0x28>
 682:	9f 57       	subi	r25, 0x7F	; 127
 684:	98 f0       	brcs	.+38     	; 0x6ac <__fixunssfsi+0x30>
 686:	b9 2f       	mov	r27, r25
 688:	99 27       	eor	r25, r25
 68a:	b7 51       	subi	r27, 0x17	; 23
 68c:	b0 f0       	brcs	.+44     	; 0x6ba <__fixunssfsi+0x3e>
 68e:	e1 f0       	breq	.+56     	; 0x6c8 <__fixunssfsi+0x4c>
 690:	66 0f       	add	r22, r22
 692:	77 1f       	adc	r23, r23
 694:	88 1f       	adc	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	1a f0       	brmi	.+6      	; 0x6a0 <__fixunssfsi+0x24>
 69a:	ba 95       	dec	r27
 69c:	c9 f7       	brne	.-14     	; 0x690 <__fixunssfsi+0x14>
 69e:	14 c0       	rjmp	.+40     	; 0x6c8 <__fixunssfsi+0x4c>
 6a0:	b1 30       	cpi	r27, 0x01	; 1
 6a2:	91 f0       	breq	.+36     	; 0x6c8 <__fixunssfsi+0x4c>
 6a4:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__fp_zero>
 6a8:	b1 e0       	ldi	r27, 0x01	; 1
 6aa:	08 95       	ret
 6ac:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__fp_zero>
 6b0:	67 2f       	mov	r22, r23
 6b2:	78 2f       	mov	r23, r24
 6b4:	88 27       	eor	r24, r24
 6b6:	b8 5f       	subi	r27, 0xF8	; 248
 6b8:	39 f0       	breq	.+14     	; 0x6c8 <__fixunssfsi+0x4c>
 6ba:	b9 3f       	cpi	r27, 0xF9	; 249
 6bc:	cc f3       	brlt	.-14     	; 0x6b0 <__fixunssfsi+0x34>
 6be:	86 95       	lsr	r24
 6c0:	77 95       	ror	r23
 6c2:	67 95       	ror	r22
 6c4:	b3 95       	inc	r27
 6c6:	d9 f7       	brne	.-10     	; 0x6be <__fixunssfsi+0x42>
 6c8:	3e f4       	brtc	.+14     	; 0x6d8 <__fixunssfsi+0x5c>
 6ca:	90 95       	com	r25
 6cc:	80 95       	com	r24
 6ce:	70 95       	com	r23
 6d0:	61 95       	neg	r22
 6d2:	7f 4f       	sbci	r23, 0xFF	; 255
 6d4:	8f 4f       	sbci	r24, 0xFF	; 255
 6d6:	9f 4f       	sbci	r25, 0xFF	; 255
 6d8:	08 95       	ret

000006da <__floatunsisf>:
 6da:	e8 94       	clt
 6dc:	09 c0       	rjmp	.+18     	; 0x6f0 <__floatsisf+0x12>

000006de <__floatsisf>:
 6de:	97 fb       	bst	r25, 7
 6e0:	3e f4       	brtc	.+14     	; 0x6f0 <__floatsisf+0x12>
 6e2:	90 95       	com	r25
 6e4:	80 95       	com	r24
 6e6:	70 95       	com	r23
 6e8:	61 95       	neg	r22
 6ea:	7f 4f       	sbci	r23, 0xFF	; 255
 6ec:	8f 4f       	sbci	r24, 0xFF	; 255
 6ee:	9f 4f       	sbci	r25, 0xFF	; 255
 6f0:	99 23       	and	r25, r25
 6f2:	a9 f0       	breq	.+42     	; 0x71e <__floatsisf+0x40>
 6f4:	f9 2f       	mov	r31, r25
 6f6:	96 e9       	ldi	r25, 0x96	; 150
 6f8:	bb 27       	eor	r27, r27
 6fa:	93 95       	inc	r25
 6fc:	f6 95       	lsr	r31
 6fe:	87 95       	ror	r24
 700:	77 95       	ror	r23
 702:	67 95       	ror	r22
 704:	b7 95       	ror	r27
 706:	f1 11       	cpse	r31, r1
 708:	f8 cf       	rjmp	.-16     	; 0x6fa <__floatsisf+0x1c>
 70a:	fa f4       	brpl	.+62     	; 0x74a <__floatsisf+0x6c>
 70c:	bb 0f       	add	r27, r27
 70e:	11 f4       	brne	.+4      	; 0x714 <__floatsisf+0x36>
 710:	60 ff       	sbrs	r22, 0
 712:	1b c0       	rjmp	.+54     	; 0x74a <__floatsisf+0x6c>
 714:	6f 5f       	subi	r22, 0xFF	; 255
 716:	7f 4f       	sbci	r23, 0xFF	; 255
 718:	8f 4f       	sbci	r24, 0xFF	; 255
 71a:	9f 4f       	sbci	r25, 0xFF	; 255
 71c:	16 c0       	rjmp	.+44     	; 0x74a <__floatsisf+0x6c>
 71e:	88 23       	and	r24, r24
 720:	11 f0       	breq	.+4      	; 0x726 <__floatsisf+0x48>
 722:	96 e9       	ldi	r25, 0x96	; 150
 724:	11 c0       	rjmp	.+34     	; 0x748 <__floatsisf+0x6a>
 726:	77 23       	and	r23, r23
 728:	21 f0       	breq	.+8      	; 0x732 <__floatsisf+0x54>
 72a:	9e e8       	ldi	r25, 0x8E	; 142
 72c:	87 2f       	mov	r24, r23
 72e:	76 2f       	mov	r23, r22
 730:	05 c0       	rjmp	.+10     	; 0x73c <__floatsisf+0x5e>
 732:	66 23       	and	r22, r22
 734:	71 f0       	breq	.+28     	; 0x752 <__floatsisf+0x74>
 736:	96 e8       	ldi	r25, 0x86	; 134
 738:	86 2f       	mov	r24, r22
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	60 e0       	ldi	r22, 0x00	; 0
 73e:	2a f0       	brmi	.+10     	; 0x74a <__floatsisf+0x6c>
 740:	9a 95       	dec	r25
 742:	66 0f       	add	r22, r22
 744:	77 1f       	adc	r23, r23
 746:	88 1f       	adc	r24, r24
 748:	da f7       	brpl	.-10     	; 0x740 <__floatsisf+0x62>
 74a:	88 0f       	add	r24, r24
 74c:	96 95       	lsr	r25
 74e:	87 95       	ror	r24
 750:	97 f9       	bld	r25, 7
 752:	08 95       	ret

00000754 <__fp_inf>:
 754:	97 f9       	bld	r25, 7
 756:	9f 67       	ori	r25, 0x7F	; 127
 758:	80 e8       	ldi	r24, 0x80	; 128
 75a:	70 e0       	ldi	r23, 0x00	; 0
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	08 95       	ret

00000760 <__fp_nan>:
 760:	9f ef       	ldi	r25, 0xFF	; 255
 762:	80 ec       	ldi	r24, 0xC0	; 192
 764:	08 95       	ret

00000766 <__fp_pscA>:
 766:	00 24       	eor	r0, r0
 768:	0a 94       	dec	r0
 76a:	16 16       	cp	r1, r22
 76c:	17 06       	cpc	r1, r23
 76e:	18 06       	cpc	r1, r24
 770:	09 06       	cpc	r0, r25
 772:	08 95       	ret

00000774 <__fp_pscB>:
 774:	00 24       	eor	r0, r0
 776:	0a 94       	dec	r0
 778:	12 16       	cp	r1, r18
 77a:	13 06       	cpc	r1, r19
 77c:	14 06       	cpc	r1, r20
 77e:	05 06       	cpc	r0, r21
 780:	08 95       	ret

00000782 <__fp_round>:
 782:	09 2e       	mov	r0, r25
 784:	03 94       	inc	r0
 786:	00 0c       	add	r0, r0
 788:	11 f4       	brne	.+4      	; 0x78e <__fp_round+0xc>
 78a:	88 23       	and	r24, r24
 78c:	52 f0       	brmi	.+20     	; 0x7a2 <__fp_round+0x20>
 78e:	bb 0f       	add	r27, r27
 790:	40 f4       	brcc	.+16     	; 0x7a2 <__fp_round+0x20>
 792:	bf 2b       	or	r27, r31
 794:	11 f4       	brne	.+4      	; 0x79a <__fp_round+0x18>
 796:	60 ff       	sbrs	r22, 0
 798:	04 c0       	rjmp	.+8      	; 0x7a2 <__fp_round+0x20>
 79a:	6f 5f       	subi	r22, 0xFF	; 255
 79c:	7f 4f       	sbci	r23, 0xFF	; 255
 79e:	8f 4f       	sbci	r24, 0xFF	; 255
 7a0:	9f 4f       	sbci	r25, 0xFF	; 255
 7a2:	08 95       	ret

000007a4 <__fp_split3>:
 7a4:	57 fd       	sbrc	r21, 7
 7a6:	90 58       	subi	r25, 0x80	; 128
 7a8:	44 0f       	add	r20, r20
 7aa:	55 1f       	adc	r21, r21
 7ac:	59 f0       	breq	.+22     	; 0x7c4 <__fp_splitA+0x10>
 7ae:	5f 3f       	cpi	r21, 0xFF	; 255
 7b0:	71 f0       	breq	.+28     	; 0x7ce <__fp_splitA+0x1a>
 7b2:	47 95       	ror	r20

000007b4 <__fp_splitA>:
 7b4:	88 0f       	add	r24, r24
 7b6:	97 fb       	bst	r25, 7
 7b8:	99 1f       	adc	r25, r25
 7ba:	61 f0       	breq	.+24     	; 0x7d4 <__fp_splitA+0x20>
 7bc:	9f 3f       	cpi	r25, 0xFF	; 255
 7be:	79 f0       	breq	.+30     	; 0x7de <__fp_splitA+0x2a>
 7c0:	87 95       	ror	r24
 7c2:	08 95       	ret
 7c4:	12 16       	cp	r1, r18
 7c6:	13 06       	cpc	r1, r19
 7c8:	14 06       	cpc	r1, r20
 7ca:	55 1f       	adc	r21, r21
 7cc:	f2 cf       	rjmp	.-28     	; 0x7b2 <__fp_split3+0xe>
 7ce:	46 95       	lsr	r20
 7d0:	f1 df       	rcall	.-30     	; 0x7b4 <__fp_splitA>
 7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <__fp_splitA+0x30>
 7d4:	16 16       	cp	r1, r22
 7d6:	17 06       	cpc	r1, r23
 7d8:	18 06       	cpc	r1, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	f1 cf       	rjmp	.-30     	; 0x7c0 <__fp_splitA+0xc>
 7de:	86 95       	lsr	r24
 7e0:	71 05       	cpc	r23, r1
 7e2:	61 05       	cpc	r22, r1
 7e4:	08 94       	sec
 7e6:	08 95       	ret

000007e8 <__fp_zero>:
 7e8:	e8 94       	clt

000007ea <__fp_szero>:
 7ea:	bb 27       	eor	r27, r27
 7ec:	66 27       	eor	r22, r22
 7ee:	77 27       	eor	r23, r23
 7f0:	cb 01       	movw	r24, r22
 7f2:	97 f9       	bld	r25, 7
 7f4:	08 95       	ret

000007f6 <__umulhisi3>:
 7f6:	a2 9f       	mul	r26, r18
 7f8:	b0 01       	movw	r22, r0
 7fa:	b3 9f       	mul	r27, r19
 7fc:	c0 01       	movw	r24, r0
 7fe:	a3 9f       	mul	r26, r19
 800:	70 0d       	add	r23, r0
 802:	81 1d       	adc	r24, r1
 804:	11 24       	eor	r1, r1
 806:	91 1d       	adc	r25, r1
 808:	b2 9f       	mul	r27, r18
 80a:	70 0d       	add	r23, r0
 80c:	81 1d       	adc	r24, r1
 80e:	11 24       	eor	r1, r1
 810:	91 1d       	adc	r25, r1
 812:	08 95       	ret

00000814 <_exit>:
 814:	f8 94       	cli

00000816 <__stop_program>:
 816:	ff cf       	rjmp	.-2      	; 0x816 <__stop_program>
